#!/usr/bin/env bash

# Copyright 2018 Correct Context Sp. z o. o.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is library for building CLI interfaces
#
# Features
# - multi-command per app
# - --long-options <VALUE>
# - -s - short options <VALUE>
# - ENV_VAR to option propagation
# - TODO: --flags | -f â€“ support
# - debug|error reporting
# - DEBUG env var enables debug messages
# - application help screen auto-generation
# - command help screen auto-generation
# - TODO: prompt|interaction support
# - TODO: multi trap support
#
# Known issues:
# - bash 'trap' is taken for subprocess cleanup
# - sourcing lib enforces "set -euo pipefail"



set -euo pipefail
export SHELLOPTS

export _UU_TRACE_TOKEN=${_UU_TRACE_TOKEN:-$$.${RANDOM}}  # For tracing one execution across multiple bash subshells
export _UU_COMMAND_FILE=$(basename "$0")

# TODO: add support for multiple traps (user defined traps)
trap '_E=$? ; _J=$(jobs -pr) ; [ "${_J}x" != "x" ] && kill -TERM $_J ; exit $_E' EXIT INT ERR TERM QUIT


# Error code specification
export _UU_ERROR_CODE_IMPLEMENTATION_REQUIRED=35
export _UU_ERROR_CODE_OPTION_REQUIRED=31


export _UU_APP_COMMAND_PREFIX=$(basename "$0")  # just default value, can be changed using ::set-command-prefix
declare -xa _UU_APP_AVAILABLE_SCOPES  # list of all declared scope names
declare -xA _UU_APP_AVAILABLE_SCOPES_TITLES  # scope-name -> scope-description -- human descriptions of scopes
declare -xA _UU_COMMAND_SCOPE  # scope of current command
declare -xA _UU_COMMAND_DESCRIPTION  # desciption of current command
declare -xA _UU_COMMAND_OPTION_TABLE_SHORT  # long -> short
declare -xA _UU_COMMAND_OPTION_RTABLE_SHORT  # short -> long
declare -xA _UU_COMMAND_OPTION_TABLE_ENV  # long -> env
declare -xA _UU_COMMAND_OPTION_RTABLE_ENV  # env -> long
declare -xA _UU_COMMAND_OPTION_TABLE_VALIDATORS  # long -> validators (func names)
declare -xA _UU_COMMAND_OPTION_TABLE_DEFAULT  # long -> default
declare -xA _UU_COMMAND_OPTION_TABLE_HELP  # long -> help message
declare -xA _UU_COMMAND_OPTION_TABLE_REQUIRED  # long -> required (bool)
declare -xA _UU_COMMAND_OPTION_TABLE_PARSER  # long -> value parser (func name)
export UU_COMMAND_POSITIONAL_ARGUMENTS=()


uu::debug(){
  # Prints user DEBUG message on stderr (only if DEBUG environment variable is set)
  if [ "${DEBUG:-}" ];then
      (>&2 echo "[$_UU_TRACE_TOKEN][DEBUG][$_UU_COMMAND_FILE]: $@")
  fi
}

uu::is-debug(){
  if [ "${DEBUG:-}x" != x ];then
    return 0
  else
    return 1
  fi
}

uu::internal-debug(){
  # This function is used for internal libbashuu debug messages.
  # It's separated from user debug messages to limit noise.
  if [ "${UUDEBUG:-}x" != x ] || [ "${UU_DEBUG:-}x" != x ] ;then
      (>&2 echo "[$_UU_TRACE_TOKEN][UUDEBUG][$_UU_COMMAND_FILE]: $@")
  fi
}

uu::internal-debug "Importing libbashuu..."

uu::msg(){
  # Prints user message on stderr.
  # The idea here is that all user interaction happens on stderr.
  # Stdout can be used for parseable command output which can be piped
  # or used by other commands.
  # We could detect if output is TTY, but in that case we lose some information
  (>&2 echo "$@")
}

uu::error(){
  # Prints ERROR message on stderr. Does not exit the flow.
  (>&2 echo "[$_UU_TRACE_TOKEN][ERROR][$_UU_COMMAND_FILE]: $@")
}

uu::internal-error(){
  # Prints internal libbashuu ERROR message on stderr.
  local msg
  local hint
  local details
  local code
  msg=${1?First argument must be error message}
  hint=${2?Second argument must be hint for the user how to fix the issue}
  details=${3?Third argument must describe details  and context of the issue}
  code=${4:-1}
    (>&2 echo "[$_UU_TRACE_TOKEN][ERROR][$_UU_COMMAND_FILE]: INTERNAL ERROR: $msg")
    if [ "${hint:-}x" != x ];then
      (>&2 echo "[$_UU_TRACE_TOKEN][ERROR][$_UU_COMMAND_FILE]: HINT: $hint")
    fi
    if [ "${details:-}x" != x ];then
      (>&2 echo "[$_UU_TRACE_TOKEN][ERROR][$_UU_COMMAND_FILE]: DETAILS: $details")
    fi
}


uu::command::raise-implementation-required(){
  error "THIS COMMAND MUST BE IMPLEMENTED BY THE USER BEFORE TOOL CAN BE USED!"
  exit 35
} 

uu::app::main(){
  uu::internal-debug "Starting MAIN"
  if [ $# -gt 0 ];then
    COMMAND="$_UU_APP_COMMAND_PREFIX-${1:-no-command}"
    shift
  else
    uu::app::produce-help
    exit 31
  fi

  if [ "$COMMAND" == $_UU_APP_COMMAND_PREFIX--h ] || [ "$COMMAND" == $_UU_APP_COMMAND_PREFIX--help ] || [ "$COMMAND" == $_UU_APP_COMMAND_PREFIX---help ];then
    uu::app::produce-help
    exit 0
  fi


  if command -v "$COMMAND" > /dev/null;then
    COMMAND=$(command -v "$COMMAND")
  fi
  if [ ! -x "$COMMAND" ];then
    uu::internal-error "xc command '$COMMAND' is not implemented!" "If you think this command needs to exist implement '$COMMAND' and put it in the search PATH." "'$COMMAND' cannot be found in PATH."
    exit 30
  fi
  uu::internal-debug "Running XC subcommand $COMMAND..."

  exec "$COMMAND" "$@"
}

uu::app::produce-help(){

  local BASENAME
  BASENAME=$(basename "$0")
  local _UU_APP_COMMAND_PREFIX_SIZE
  _UU_APP_COMMAND_PREFIX_SIZE=$(( ${#_UU_APP_COMMAND_PREFIX} + 1 ))  # "$BASENAME-"

  local _OLD_IFS
  local _OLD_SHELLOPTS

  # variables for iterating
  local CURRENT_SCOPE
  local _CMD
  local _CMD_PATH
  local _CMD_CACHE_PATH
  local _CMD_META
  local _CMD_SCOPE
  local _CMD_DESCRIPTION

  if ! command -v git 2>/dev/null >/dev/null;then
    uu::internal-error "'git' command required by '$BASENAME' (libbashuu) to work" "Please install 'git'" "" 1
    exit 128
  fi
  
  local SCOPE_COMMAND_LIST
  declare -A SCOPE_COMMAND_LIST  # [$scope|$command] = 1  # just SET emulation
  local SCOPE_COMAMND_DESCRIPTIONS
  declare -A SCOPE_COMAMND_DESCRIPTIONS # $command -> description

  uu::app::add-scope "not_implemented" "NOT IMPLEMENTED PROPERLY"

  _OLD_IFS=$IFS
  IFS=':';for i in $PATH;
  do
    if ! test -d "$i" ;then
      continue
    fi
    IFS=$'\n'; for _CMD_PATH in $(find "$i" -maxdepth 1 -iname "$_UU_APP_COMMAND_PREFIX-*" -executable -type f ;)
    do
      _CMD_CACHE_PATH="${XDG_CACHE_PATH:-${XDG_RUNTIME_PATH:-$HOME/.cache}}/$_UU_APP_COMMAND_PREFIX-$(cksum "$_CMD_PATH" | cut -f1 -d' ')"
      _CMD=$(basename "${_CMD_PATH}")
      _CMD=${_CMD:${_UU_APP_COMMAND_PREFIX_SIZE}}

      uu::internal-debug "Loading metadata from $_CMD_PATH"

      if [ -f "$_CMD_CACHE_PATH" ];then
        _CMD_META=$(cat "$_CMD_CACHE_PATH")
      else
        _OLD_SHELLOPTS=$(set +o)
        set +eu
        _CMD_META=$(timeout 1 "$_CMD_PATH" --META 2> /dev/null || echo "ERROR")
        eval "$_OLD_SHELLOPTS"
        export SHELLOPTS
        echo "$_CMD_META" > "$_CMD_CACHE_PATH"
      fi
      _CMD_SCOPE=$(echo "$_CMD_META" | git config -f - meta.scope || echo "not_implemented")
      _CMD_DESCRIPTION=$(echo "$_CMD_META" | git config -f - meta.description || echo "ERROR")

      #TODO: if cmd has scope that is not declared, it's missing from the list, probably better would be to put it to "not_implemented"
      SCOPE_COMMAND_LIST["${_CMD_SCOPE}|$_CMD"]=1
      SCOPE_COMAMND_DESCRIPTIONS[$_CMD]="$_CMD_DESCRIPTION"
    done
  done
  IFS=$_OLD_IFS
  cat <<EOF
$BASENAME - ${_UU_APP_DESCRIPTION:-NixOS Cluster}

Usage: $BASENAME COMMAND [options]

EOF

  local CURRENT_SCOPE
  for CURRENT_SCOPE in "${_UU_APP_AVAILABLE_SCOPES[@]}"
  do
    local CURRENT_SCOPE_SIZE
    CURRENT_SCOPE_SIZE=$(( ${#CURRENT_SCOPE} + 1 ))
    echo "  ${_UU_APP_AVAILABLE_SCOPES_TITLES[$CURRENT_SCOPE]:-IMPLEMENTATION ERROR!!!}:"
    for _CMD in "${!SCOPE_COMMAND_LIST[@]}"
    do
      if [[ "$_CMD" == "$CURRENT_SCOPE|"* ]];then
        _CMD=${_CMD:${CURRENT_SCOPE_SIZE}}
        printf "    %-20s  %s\n" "$_CMD" "${SCOPE_COMAMND_DESCRIPTIONS[$_CMD]}"
      fi
    done
    echo
  done
  echo
}


uu::app::set-command-prefix(){
  export _UU_APP_COMMAND_PREFIX=$1
}
uu::app::set-description(){
  export _UU_APP_DESCRIPTION="$@"
}

uu::command::produce-help(){
  # Prints command level help message.
  local var
  echo "Usage: $(basename $0)"
  echo 
  if [ "${_UU_SCOPE_DESCRIPTION:-}x" != x ];then
    echo "${_UU_SCOPE_DESCRIPTION}"
    echo
  fi
  for var in "${!_UU_COMMAND_OPTION_TABLE_ENV[@]}"
  # var is "long option name" here
  do
    if [ "${_UU_COMMAND_OPTION_TABLE_HELP[$var]:-}x" == x ];then
      # if there is no help, probably we don't want to show it
      continue
    fi
    if [ ${_UU_COMMAND_OPTION_TABLE_REQUIRED[$var]} -eq 1 ];then
      local req=required
    else
      local req=optional
    fi
    if [ "${_UU_COMMAND_OPTION_TABLE_SHORT[$var]:-}x" != x ];then
      local short="-${_UU_COMMAND_OPTION_TABLE_SHORT[$var]:-}"
    else
      local short=
    fi
    printf "  %2s | --%-15s | %-15s - (%s, default:%s)\n                                             %s\n" \
      "$short" \
      "$var VAL" \
      "${_UU_COMMAND_OPTION_TABLE_ENV[$var]}" \
      "$req" \
      "${_UU_COMMAND_OPTION_TABLE_DEFAULT[$var]:-''}" \
      "${_UU_COMMAND_OPTION_TABLE_HELP[$var]}"
  done
  echo "  -h | --help                              - print help"
  echo "     | --debug           | DEBUG           - show debug logs"
  echo "                                             (env DEBUG shows also parsing debug logs)"
  echo "     | --META                              - print command metadata"
}

uu::app::add-scope(){
  local scope_name
  local scope_title
  scope_name=${1?First argument must be DNS compatible scope name}
  scope_title=${2?Second argument must be scope title for human}
  _UU_APP_AVAILABLE_SCOPES+=("$scope_name")
  _UU_APP_AVAILABLE_SCOPES_TITLES[$scope_name]="$scope_title"
}

uu::command::set-scope(){
  export _UU_COMMAND_SCOPE=$1
}
uu::command::set-description(){
  export _UU_COMMAND_DESCRIPTION="$@"
}

uu::option::validate(){
  local OPTION_NAME
  OPTION_NAME=$1
  local OPTION_VALUE
  OPTION_VALUE=$2
  local VALIDATORS
  VALIDATORS=$(echo "${_UU_COMMAND_OPTION_TABLE_VALIDATORS[$OPTION_NAME]}" | tr "," "\n")
  uu::internal-debug "Validators of $OPTION_NAME: ${_UU_COMMAND_OPTION_TABLE_VALIDATORS[$OPTION_NAME]}"
  for VALIDATOR in ${VALIDATORS[@]}
  do
    uu::internal-debug "validating option '$OPTION_NAME' with validator '$VALIDATOR'..."
    case "$VALIDATOR" in
      existing-path)
        if [ ! -e "${OPTION_VALUE}" ];then
          uu::error "Option --$OPTION_NAME must point to an existing path, but currently it is pointing to ${OPTION_VALUE} and this does not exist (bash -e test)."
          exit 32
        fi
        ;;
      existing-file-path)
        if [ ! -f "${OPTION_VALUE}" ];then
          uu::error "Option --$OPTION_NAME must point to file, but currently it is pointing to ${OPTION_VALUE} and this is not a file (bash -f test)."
          exit 32
        fi
        ;;
      dns-name)
        if ! echo "${OPTION_VALUE}" | grep -qP '(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63})+$)';then
          uu::error "Option '${OPTION_NAME}' value ('${OPTION_VALUE}') is not proper DNS name."
          exit 32
        fi
        ;;
      ssh-private-key-path)
        if ! command -v ssh-keygen 2> /dev/null > /dev/null;then
          uu::internal-error "ssh-keygen command does not exist but it's required by 'ssh-private-key-path' option validator" "" "" 1
        fi
        if ! ssh-keygen -y -e -f "$OPTION_VALUE" > /dev/null;then
          uu::error "$OPTION_VALUE does not contain ssh private key."
          exit 32
        fi
        ;;
      executable-path)
        if [ ! -f "${OPTION_VALUE}" ];then
          error "Option $OPTION_NAME must point to executable, but currently it is pointing to ${!OPTION_NAME} and file does not exist."
          exit 32
        fi
        if [ ! -x "${OPTION_VALUE}" ];then
          error "Option $OPTION_NAME must point to executable, but currently it is pointing to ${!OPTION_NAME} and it is not executable."
          exit 32
        fi
      ;;
      *)
        if type ${VALIDATOR:-} | head -n1 | grep -q function;then
          if ! ${VALIDATOR} "${OPTION_VALUE}";then
            uu::internal-error "Custom validator '$VALIDATOR' failed to validate option --$OPTION_NAME against value '$OPTION_VALUE'" "" ""
            exit 1
          fi
        else
          uu::internal-error "Validator ($VALIDATOR) of option '$OPTION_NAME' is not a function!" "Validator must be libbashuu internal validator (like: path,dns-name,executable-path) or a bash function name." "Looks like option was defined with validator function which does not exist or it is broken in some way."
          exit 29
        fi
        ;;
    esac
  done
}

uu::command::main(){
  # This command must be invoked with options to parse.
  # In most cases you just want to do:
  # 
  #     uu::command::main "$@"
  #
  #TODO potentially we want to enabl extglob only in scope of this function so we need to restore it later
  shopt -s extglob
  local var
  local val
  uu::internal-debug "uu::command::main - start"
  for opt in ${!_UU_COMMAND_OPTION_TABLE_ENV[@]}
  do
    val=${_UU_COMMAND_OPTION_TABLE_DEFAULT[$opt]}
    if [ "${val:-}x" != x ];then
      export ${_UU_COMMAND_OPTION_TABLE_ENV[$opt]}=$val
    fi
    unset val
  done
  while [ $# -gt 0 ];do
    case "$1" in
      -h|--help)
        uu::command::produce-help
        exit 0
        ;;
      --debug)
        export DEBUG=1
        ;;
      --uudebug)
        export UU_DEBUG=1
        ;;
      --META)
        echo "[meta]"
        echo "scope=${_UU_COMMAND_SCOPE:-}"
        echo "description=${_UU_COMMAND_DESCRIPTION:-}"
        exit 0
        ;;
      -?)
        local long
        long=${_UU_COMMAND_OPTION_RTABLE_SHORT["${1:1}"]:-}
        if [ "$long" ];then
          # it is option
          local env
          env=${_UU_COMMAND_OPTION_TABLE_ENV[$long]}
          if [ $# -lt 2 ];then
            uu::error "Option '$long' requires argument!"
            uu::command::produce-help
            uu::error "Option '$long' requires argument!"
            exit 1
          fi
          export $env="$2"
          shift
        else
          # unknown
          uu::error "Option or flag '$1' not defined!"
          uu::command::produce-help
          uu::error "Option or flag '$1' not defined!"
          exit 1
        fi
        ;;
      --*)
        local opt_env
        local opt_long
        opt_long=${1:2}
        opt_env=${_UU_COMMAND_OPTION_TABLE_ENV["$opt_long"]:-}
        if [ -n "$opt_env" ];then
          # it is option
          if [ $# -lt 2 ];then
            uu::error "Option '$opt_long' requires argument!"
            uu::command::produce-help
            uu::error "Option '$opt_long' requires argument!"
            exit 1
          fi
          export $opt_env="$2"
          shift
        else
          # unknown
          uu::error "Option or flag '$1' not defined!"
          uu::command::produce-help
          uu::error "Option or flag '$1' not defined!"
          exit 1
        fi
        ;;
      *)
        UU_COMMAND_POSITIONAL_ARGUMENTS+=("$1")
        ;;
    esac
    shift
  done
  local opt
  local req
  local val
  for opt in ${!_UU_COMMAND_OPTION_TABLE_ENV[@]}
  do
    val=${_UU_COMMAND_OPTION_TABLE_ENV[$opt]}
    req=${_UU_COMMAND_OPTION_TABLE_REQUIRED[$opt]}
    if [ $req -ne 0 ] && [ "${!val:-}x" == x ];then
      uu::error "Option '$opt' is required!"
      uu::command::produce-help
      uu::error "Option '$opt' is required!"
      exit 1
    elif [ "${!val:-}x" == x ];then
      uu::error "Option '$opt' has no value (default or provided by user)"
      uu::command::produce-help
      uu::error "Option '$opt' has no value (default or provided by user)"
      exit 1
    fi
    uu::option::validate "$opt" "${!val}"
    unset val
  done
  for opt in ${_UU_COMMAND_OPTION_TABLE_ENV[@]}
  do
    uu::internal-debug "Environment variable '$opt' is available from option '${_UU_COMMAND_OPTION_RTABLE_ENV[$opt]}'"
  done
  uu::internal-debug "Available positional arguments: '${UU_COMMAND_POSITIONAL_ARGUMENTS:-}'"
  uu::internal-debug "uu::command::main finished!"
}

parse-bool(){
  local value
  value=$1
  if [ $value == 1 ] || \
     [ $value == on ] || \
     [ $value == On ] || \
     [ $value == ON ] || \
     [ $value == y ] || \
     [ $value == yes ] || \
     [ $value == Y ] || \
     [ $value == Yes ] || \
     [ $value == YES ] || \
     [ $value == t ] || \
     [ $value == true ] || \
     [ $value == T ] || \
     [ $value == True ] || \
     [ $value == TRUE ];then
    echo 1
  else
    echo 0
  fi
}

parse-string(){
  echo "$@"
}

uu::command::define-option(){
  local long
  long=${long?option 'long' required: variable name}
  # local short=${short?option 'short' required: one character}
  local short
  short=${short:-}
  local env
  env=${env?option 'env' required: variable name}
  local validators
  validators=${validators?option 'validators' is required: comma separated list of function names (or built-in validator names)}
  local default
  default=${default:-}
  local help
  help=${help:-}
  local required
  required=${required?option 'required' required: 1 or 0}
  local parser
  parser=${parser:-parse-string} # must be empty or function name

  uu::internal-debug "Defining CLI option: $long $short $env $validators $default $help $required"
  if [ ${#long} -lt 2 ];then
    uu::internal-error "Long option '$long' must be longer than 2 characters."
    exit 1
  fi
  if [ ${#env} -lt 3 ];then
    uu::internal-error "Environment name '$env' for option '$long' must be longer than 3 characters."
    exit 1
  fi
  if [ ${#short} -ne 0 ] && [ ${#short} -ne 1 ];then
    uu::internal-error "Short option '$short' for '$long'" "Must be exactly one character!" ""
    exit 1
  fi
  if [ ${#short} -eq 1 ];then
    _UU_COMMAND_OPTION_TABLE_SHORT[$long]=$short
    _UU_COMMAND_OPTION_RTABLE_SHORT[$short]=$long
  fi
  _UU_COMMAND_OPTION_TABLE_ENV[$long]=$env
  _UU_COMMAND_OPTION_RTABLE_ENV[$env]=$long
  _UU_COMMAND_OPTION_TABLE_VALIDATORS[$long]=$validators
  _UU_COMMAND_OPTION_TABLE_DEFAULT[$long]=$default
  _UU_COMMAND_OPTION_TABLE_HELP[$long]=$help
  _UU_COMMAND_OPTION_TABLE_REQUIRED[$long]=$(parse-bool "$required")
  _UU_COMMAND_OPTION_TABLE_PARSER[$long]=$parser
}

uu::command::import-option(){
  source "$@"
}

uu::command::require-implementation(){
  local OLD_IFS
  local source_name
  source_name=${1:-$(basename "$0")-implementation}
  uu::internal-debug "Implementation from '$source_name' is required, looking for file..."
  OLD_IFS=$IFS
  IFS=':';for i in $PATH; 
  do 
    if test -d "$i" ;then
      IFS=$'\n'; for source_path in $(find "$i" -maxdepth 1 -iname "$source_name" -type f ;)
      do
        uu::internal-debug "Implementation '$source_name' found in '$i/$source_name'."
        return
      done
    fi
  done
  uu::internal-error "Cannot find implementation of '$source_name' command." "Source file '$source_name' must exist in PATH." "Implementation of a command is usually implemented in separate file. In this case implementation is expected to be in '$source_name' which should be accessible in the PATH. File does not have to be executable."
  exit 1
}



uu::utils::forced-prompt(){
  NOT IMPLEMENTED
}
uu::utils::optional-prompt(){
  NOT IMPLEMENTED
}


uu::internal-debug UU_TRACE_TOKEN=${_UU_TRACE_TOKEN} Command $0
uu::internal-debug "Libbashuu imported."
